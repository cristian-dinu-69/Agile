Objectives
identify and describe Agile project management artifacts
[Video description begins] Topic Title: Agile Artifacts. Your host for the session is Colin Calnan. [Video description ends]

In this video, I'll identify and describe Agile Project Management Artifacts. So there are items of key information that the Scrum team and the stakeholders need to be aware of for understanding the product and development, as well as the activities being planned, and the activities being done on the project. In Agile project management these are known as artifacts and there are a number of artifacts that are defined in Scrum Agile framework. So that, that is product vision, sprint goal, product/sprint backlogs, definition of done, an increment, and a burndown chart.

So there are two artifacts that help set the goals and the vision for the Agile project, but their focus is slightly different. So let's look at product vision. So product vision defines the long term goal of the project. It helps set the overall direction. And it also guides the Scrum team. The vision must be short and precise so that everybody should be able to memorize it. The other artifact that helps set the goals for the project is the sprint goal. So the sprint goal helps to focus the sprint. It's only concerned for the duration of the sprint which is usually two to three weeks.

And it has the objective that needs to be met within the sprint through the implementation of the backlog items. It also provides guidance to the development team on why it's building the product increment. So to help manage the list of work that needs to be done in order to deliver a final working product, there's two artifacts that can help manage that list. Firstly, there's the product backlog. And that's a list of all things that are required in the product. And it consists of a list of features, functions, requirements, enhancements, and fixes.

And these things make up all of the changes that are to be made to the product in the future release. In a product backlog typically the requirements of a product keep changing. And this means that it's continuously and consistently updated to reflect what the product needs so that it's going to be the most useful to the target users. So on a shorter term view, there's the sprint backlog. And it's basically a subset of the product backlog that's selected for the sprint along with a plan for delivering the product increment and realizing the sprint goal. It defines the work of the development team will perform to turn the product backlog into a done increment. A

nd the sprint backlog makes all of the work that the development team identifies as necessary visible to the team. So every product backlog item has some acceptance criteria that defines what criteria must be met when the item is to be declared done, and these criteria apply to most or all of the product backlog items. Instead of defining the criteria over and over with each item, we can collect criteria on one place and this can be called the definition of done. A simple definition of done might include that it was reviewed by the stakeholder or a specific team member.

That there's completion of all of the documentation related to the user story. That it's completed user acceptance or unit acceptance testing of the user story. That all issues have been fixed. That QA testing has been done. And that some sort of successful demonstration has been carried out for stakeholders. So then there's the increment. And the increment is basically the sum of all of the product backlog items that must be completed during a sprint. At the end of a sprint, a new increment must be done, which means that it must meet the team's definition of done, and it must be in a usable condition.

Whatever's produced must be in a usable condition regardless of whether the product owner decides to actually release it or not. So burndown charts, burndown charts are graphs that give an overview of the progress over time when working through a project. As tasks are completed, the graph burns down to zero. And this helps guide the development team to successfully complete a sprint on time with a working product. So the chart will show the work done in each iteration, the work remaining, the work done so far, and when we can expect the sprint to be complete.

If a team decides that they have added more tasks than possible to complete in the sprint, the burndown chart is going to help them figure out which tasks that they're not going to realistically be able to complete in that iteration. So those tasks can be moved back into the product backlog. So burndowns are great because they make the reality of the project clear. They show the impact of the decisions. They warn you early if things are not going to plan. And they get rid of all of the wishful thinking around dates.