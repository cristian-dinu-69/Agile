Objectives
identify the steps in the Agile life cycle
[Video description begins] Topic Title: Agile Life Cycle. Your host for the session is Colin Calnan. [Video description ends]

In this video, I'll identify the steps in the Agile lifecycle. So the overall goal of Agile is to adapt to change and deliver working software as quickly as possible. However, each methodology has slight variations in the way it defines the phases of software development. The Agile process flow represents the full Agile Life Cycle within an organization, and it generally looks something like this. Concept is where projects are envisioned and prioritized.

Inception, team members will be identified, fundings put in place, and initial environments and requirements are discussed. Iteration construction, so the development team works on delivering working software based on iteration requirements and feedback. Release, this would include QA testing, internal and external training, document development and then the final release of the iteration into production. Production is the ongoing support of the software. And retirement would be end of life activities which would include customer notification and migration.

[Video description begins] Screen title: Agile Iteration Workflow. [Video description ends]

So let's look at identifying some more steps in the Agile lifecycle. Agile software development is driven by an iterative process. Each iteration results in creating the next piece of software which is always working, and it has supporting elements like documentation. And this iterates until the final product is complete. Each iteration is usually two to four weeks in length, and has a fixed completion time. It's time-bound.

The iteration process needs to be methodical. And the scope of work for each iteration will only be as much as the allotted time allows. So a typical iteration process is made up of a number of phases or steps. You've got the Requirements, which is where we define the requirements based on the backlog. The Development, this is where the development happens, the software is built based on the requirements. Testing, this is testing internal and external things. It's including where training will happen and documentation will be developed.

Delivery, this is where you would integrate and deliver their product into production. And then Feedback, it's a critical step where you would get customer and stakeholder feedback, and then work that into requirements for the next iteration. So for the rest of the project, the process is simply a matter of repeating these steps over and over until all of the items in the backlog have been completed. And these steps, or flow, is more of a loop than a linear process. So Agile evolved from different lightware, software approaches in the 90s in response to a bit of a dislike of the rigid and linear waterfall model.

And it focuses on flexibility, continuous improvement, and speed. And here are some of the top advantages of Agile. Change is embraced, so the shorter planning cycles make it easier to accommodate and accept changes. There are strong team interactions. Agile encourages strong interaction and highlights the importance of frequent communication and face-to-face interactions. The end goal can be unknown. Agile's very beneficial for projects where the end goal hasn't been clearly defined. And as the project progresses, the goals become clearer and the development can adapt to these evolving requirements.

Customers also have many opportunities to see the work being delivered and share their input and have a real-time impact on the end product. They gain a sense of ownership because the team is listening to them. Faster delivery, by breaking down the project into iterations, the team can focus on high quality development, testing, and collaboration. And doing the testing in iterations means that bugs can be identified and solved more quickly, which means that high quality software can be delivered faster.

Continuous improvement because Agile projects encourage feedback from users and team members through the whole project. So the lessons learned are basically plugged back into the future iterations. So the inherent flexibility is definitely a positive. But there's also some trade-offs. It can be hard to establish solid delivery dates, comprehensive documentation, and then the final product could maybe be different from what was originally intended. So there are some disadvantages of Agile.

So planning can be less concrete, it could be hard to pin down a solid delivery date. Agile's time boxed on iterations, and project managers are often reprioritizing. And it's possible that some items that were originally scheduled for delivery may not be completed in time. It requires knowledgeable teams because Agile teams are usually small, team members must be highly skilled in a number of areas. And they must also understand and feel comfortable with the chosen methodology.

Agile's most successful when the development team is committed to and completely dedicated to the project. So throughout the Agile process, active involvement and collaboration is required. And this is time consuming, and more time consuming than a traditional project. Documentation may be neglected. The Agile manifesto, it prefers working software over comprehensive documentation. So some team members may feel like it's less important to focus on documentation. And Agile teams need to find the right balance between documentation and discussion.

[Video description begins] Screen title: Making Agile Work. [Video description ends]

So as with any methodology, there are advantages and disadvantages when working through the implementation. The Agile method's more suitable in certain situations. For example, where customers and stakeholders can provide input, where functional portions are needed quickly, where flexibility is desired to help with changing requirements, and the team is co-located and is able to effectively collaborate. So as with any change, integrating Agile into the business can be overwhelming.

And there's four activities that can help support with the adoption of Agile and make it work. Daily meetings. So to host consistent or daily stand-up meetings to maintain open communication, hold team members accountable, and keep moving forward. To share feedback. Receiving feedback from stakeholders and customers and share it with the team before the next iteration begins. Live demos. Conduct live demos of each iteration to show your progress and remain agile. Make changes to your process. Use Agile to help your process get better, get feedback, and ensure that each iteration improves on the last.