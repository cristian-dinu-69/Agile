Objectives
identify the significance of continuous integration using the Agile process
[Video description begins] Topic title: Continuous Integration in Agile. Your host for the session is Colin Calnan. [Video description ends]

In this video, I'm going to identify the significance of continuous integration using the Agile process. What is continuous integration? Continuous integration is the automation in the integration of code changes from multiple contributors on a single software project. So it's made up of automatic tools that test the code before integration. A version control system is basically the crux of the CI process. Other checks like automated code quality tests, syntax style reviews, and code tidying tools also help to make up a full CI process. So how important is CI? Well, without CI, developers would have to manually coordinate and communicate when they contribute code.

And the coordination extends beyond the development teams and through the rest of the organization. The communication overhead on a non-CI environment can be complex synchronization chore, which adds unnecessary cost to projects. It causes slower code releases and higher rates of failure. And the risks grow exponentially as the engineering team and the code base grows. So introducing CI allows software developers to work independently on features in parallel. When they're ready to merge these features into the end product, they can do so independently and rapidly.

CI is a valuable tool and it's a well-established practice in modern high-performing software engineering organizations. So implementation, how can CI be used? So CI is generally used alongside Agile software development workflow. An organization will compile a list of tasks that make up a product roadmap, and these tasks are then distributed amongst the software engineering teams for delivery. CI then enables the software development tasks to be done independently and in parallel amongst the development teams.

So once one of these tasks is complete, a developer will introduce that new work into the CI system to be integrated with the rest of the project. So getting started with continuous integration, the first step is a VCS, a version control system. The core of CI is the version control system. Step one in any CI process is installing or purchasing a VCS. And the absence of a VCS should be very unlikely on a modern code base. Some popular VCSs are Git, or Mercurial, or Subversion. Next step would be, once the version control is in place, to find a version control hosting platform. And most modern version control tools have support and features built in for CI.

So some popular version control hosting platforms would be Bitbucket, GitHub, GitLab. After version control has been set up on the project, it's important to add the integration approval steps. So this means putting automated tests in place, adding the automated tests to the project. And then ensuring that once the testing framework has been installed that you can test the code, and then you have to ensure that the test cases are written after that. Adding automated tests to a project can have an initial upfront cost overhead. Some ideas for other less expensive CI approval mechanisms would be to add things like syntax checkers, or code style formatters, or some like dependency vulnerability scans.

Once you have a version control system set up and then some merge approval steps in place, you've basically established your continuous integration. And CI is not purely like engineering-specific process. The rest of the organization, including marketing, sales, and the product teams, will also benefit from that CI pipeline. So the benefits of continuous integration. The CI benefits aren't limited to the engineering team, but they greatly benefit the overall organization. So it enables the organization to scale its size, the code base size, the infrastructure. And by minimizing the integration overhead, CI actually enhances Agile. It allows each team member to own a code change all the way through to release.

It scales by removing any organizational dependencies between the development of individual features. So developers can work on features in an isolated silo, and have assurances that their code is going to seamlessly integrate with the rest of the code base. It improves the feedback loop, so another beneficial side effect of CI is faster feedback of business decisions. Product teams can test and iterate on their designs faster with a well optimized CI platform. Changes can be like rapidly pushed and measured for success, and then bugs or other issues can quickly be addressed and repaired.

Pull requests in CI also allow developers to observe and comment on code from other team members. So developers can view and collaborate on features with other developers as they move through the CI pipeline. And an efficient CI pipeline, with high confidence in automation test coverage, is going to safeguard against any regressions happening and ensuring that new features work. And it does this, that by ensuring that code, new code before it's merged must pass the CI suite which will prevent any new regressions and will help and ensure there's dialog between developers. So what are some of the challenges of CI?

So the benefits so far outweigh any challenges in adoption. But that said, it's important to be aware of some of the challenges of CI. So the real challenge of CI arises when you're transitioning from a project with no CI to a project with CI. And the first part is adoption and installation. So the primary challenge of CI is to focus mainly around the team adoption and the installation. If a team does not currently have a CI solution in place, it's going to take a lot of effort to pick one and then get started. And that means careful planning and consideration that needs to be made around the existing engineering infrastructure when you're choosing and installing a new CI pipeline.

Implementing CI functionality also requires taking the time to invest in climbing the learning curve that's associated with supportive technologies. Technologies like version control systems, hosting infrastructure, orchestration technologies, all of those things will have a learning curve associated with them. And then CI best practices, so test-driven development. Once a project has established a CI pipeline with the automatic test coverage, it's best practice to constantly develop and improve that test coverage. Test-driven development is basically the practice of writing out the test code and the test cases before doing any coding. Pull requests and code review, most modern software development teams practice a pull request code review workflow.

So that means a pull request is created when a developer's ready to merge a new code into the main code base. It notifies the developer, and then that developer will approve that new pull request. Optimizing the pipeline speed, it's important to optimize the pipeline execution speed. Any delay in the CI workflow is going to compound exponentially as the rate of your feature releases grows. So the CI pipeline speed should be measured and optimized as often as necessary. A faster CI pipeline is going to enable faster product feedback. Developers can rapidly push changes and then experiment with those feature ideas to help improve user experience. Any bugs can be quickly patched. And this increased speed offers both an advantage over the competitors and a higher quality experience for your customers.