Objectives
recognize best practices when transitioning from traditional software project management to Agile
[Video description begins] Topic Title: Agile Best Practices. Your host for the session is Colin Calnan. [Video description ends]

In this video, we'll recognize best practices when transitioning from traditional software project management to Agile. There are a handful of Agile best practices that are essential to improve a team's process. Closely integrated teams, many product owners are mistakenly including too many people on the team. Or at least in the product demo at the end of a sprint there are too many people present. During a sprint your product team needs to be focused on building and this can only happen on a closely integrated team, which includes roles like product owner, scrum master, and a QA team. Review and retrospectives. The whole point of Agile development is that the team are constantly learning from the processes.

Analyzing what's working and what isn't, and then adjusting those processes to make them better for next time. So ideally, you want to take 20 minutes at the end of the sprint with the team to review, talk about what worked, what didn't. Where the process might have fallen short, or where it completely fell apart. Then discuss how you can apply what you've learned to improve the process for the next sprint. Constant communication, this is considered one of the most important factors essential to team integration. Daily meetings to discuss the day's work and dependency are going to be vital to the delivery of the Sprint goal.

Communication tools. Teams that follow Agile management principles typically use open communication tools. And these enable team members and customers to put their suggestions and feedback somewhere openly and quickly. Short delivery cycles. The typical delivery cycle range from two to four weeks and these cycles are commonly called sprints. So in these sprints, the development team, including the QA team. Should be focused exclusively on the sprint items that their scrum master has assigned to them. And then they should be able to work on those sprint items free from any other outside distractions.

So compared to traditional development, Agile teams are generally more productive. They create higher quality products and they satisfy customers consistently. So why is this? It could be that because Agile provides teams with the opportunities to improve continuously. An Agile team works towards this kind of continuous improvement by following a number of steps. They learn lessons from problems faced in each sprint. They experiment with problem solving techniques to find the one that solves the problem best.

They generate team self awareness by reflecting on how the team can become more effective. They find out what works best for them and tweak their strategies accordingly. And they apply the learnings and the self awareness to work towards executing more successful future implementations. So this approach is different to the traditional one which follows a specific plan. And the team focuses on achieving that plan and then they conduct tests at the end. That traditional approach limits the scope for dealing with unexpected problems as they occur.

[Video description begins] Screen title: Agile Development Objectives. [Video description ends]

So why use Agile development practices? Well, the approach that's promoted by Agile grew in response to the issues and challenges associated with traditional software development. Both in terms of philosophy and the specific processes for doing that. So with the growing adoption of Agile alongside more traditional project management methods. Companies are able to act quickly to bring things under control, should their original plans go awry. So the objectives of Agile development are to deliver working, testing software, deployable software on an incremental basis.

And they do this by using Agile to improve the quality of the deliverables. It's also much easier to estimate smaller activities than large ones. So by breaking down large work items into smaller pieces, estimating accuracy is definitely going to improve. Teams are also able to continuously align the delivered software with the desired business needs. Easily adapting to change in requirements through out the process. And then by measuring and evaluating working software. Visibility into the actual progress is much more accurate and it results in better control over the project.

So what are some other benefits of Agile development? Well, quicker delivery and lower costs. Agile opens up the possibility to change the course of the project and a choice to deliver more value, more quickly. A simple way that that is achieved is by delivering working software frequently in smaller increments. That's going to result in lower development costs and quicker delivery. Short project cycles permit course correction. So with Agile teams, a work cycle is two to four weeks. And that gives stakeholders opportunities to speak into the process and ensure that the company builds the right product.

So the team can steer clear of analysis paralysis as well, and as they create the product while they're collecting the requirements. So for a given customer goal, prior use cases are identified that enable that goal. And then the set of use cases must completely enable the goal so the cases that don't support the goal should not be defined. And this helps reduce the need to analyze. Agile development processes were designed with the presumption that requirements must change. And this is because requirements can't be defined with complete confidence until somebody already has a solution in hand.

So Agile enables teams to continuously replan the release of their project. And then strives to optimize its value through the development phase. This is better than promising a product that hasn't even been planned yet, and it allows the company to gain a competitive edge in the market. It also ensures that the team's effort doesn't go down the drain with a redundant product. So there are more benefits to Agile development best practices. Agile is going to allow your team to detect problems and identify the problem that the business is trying to solve.

Through things like facilitated work sessions, it's easy to get a quick, collective understanding of the problem, the solution and the plan. Using things, low fidelity wire frames and story maps can help get to a solution more quickly. Frequent testing in Agile helps to find the source of problems quickly and adapt as needed. It also gives you the tools to implement the solutions which means you can grow rapidly and keep stakeholders happy.

And then we live in an age of remote and distributed teams and work revolves around getting more out of self-organized teams. And facilitating interaction between members working on the development process. So working in this way is going to boost collaboration and empower innovative solutions. Kind of future-proofing our processes for the future of work with more remote and distributed teams.